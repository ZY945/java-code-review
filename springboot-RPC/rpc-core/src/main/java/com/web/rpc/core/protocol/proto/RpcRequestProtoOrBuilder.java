// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc_message.proto

package com.web.rpc.core.protocol.proto;

public interface RpcRequestProtoOrBuilder extends
    // @@protoc_insertion_point(interface_extends:com.web.rpc.core.protocol.RpcRequestProto)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <code>string request_id = 1;</code>
   * @return The requestId.
   */
  java.lang.String getRequestId();
  /**
   * <code>string request_id = 1;</code>
   * @return The bytes for requestId.
   */
  com.google.protobuf.ByteString
      getRequestIdBytes();

  /**
   * <code>string service_name = 2;</code>
   * @return The serviceName.
   */
  java.lang.String getServiceName();
  /**
   * <code>string service_name = 2;</code>
   * @return The bytes for serviceName.
   */
  com.google.protobuf.ByteString
      getServiceNameBytes();

  /**
   * <code>string method_name = 3;</code>
   * @return The methodName.
   */
  java.lang.String getMethodName();
  /**
   * <code>string method_name = 3;</code>
   * @return The bytes for methodName.
   */
  com.google.protobuf.ByteString
      getMethodNameBytes();

  /**
   * <code>string group = 4;</code>
   * @return The group.
   */
  java.lang.String getGroup();
  /**
   * <code>string group = 4;</code>
   * @return The bytes for group.
   */
  com.google.protobuf.ByteString
      getGroupBytes();

  /**
   * <code>string version = 5;</code>
   * @return The version.
   */
  java.lang.String getVersion();
  /**
   * <code>string version = 5;</code>
   * @return The bytes for version.
   */
  com.google.protobuf.ByteString
      getVersionBytes();

  /**
   * <code>map&lt;string, string&gt; headers = 6;</code>
   */
  int getHeadersCount();
  /**
   * <code>map&lt;string, string&gt; headers = 6;</code>
   */
  boolean containsHeaders(
      java.lang.String key);
  /**
   * Use {@link #getHeadersMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, java.lang.String>
  getHeaders();
  /**
   * <code>map&lt;string, string&gt; headers = 6;</code>
   */
  java.util.Map<java.lang.String, java.lang.String>
  getHeadersMap();
  /**
   * <code>map&lt;string, string&gt; headers = 6;</code>
   */
  /* nullable */
java.lang.String getHeadersOrDefault(
      java.lang.String key,
      /* nullable */
java.lang.String defaultValue);
  /**
   * <code>map&lt;string, string&gt; headers = 6;</code>
   */
  java.lang.String getHeadersOrThrow(
      java.lang.String key);

  /**
   * <code>repeated bytes parameter_values = 7;</code>
   * @return A list containing the parameterValues.
   */
  java.util.List<com.google.protobuf.ByteString> getParameterValuesList();
  /**
   * <code>repeated bytes parameter_values = 7;</code>
   * @return The count of parameterValues.
   */
  int getParameterValuesCount();
  /**
   * <code>repeated bytes parameter_values = 7;</code>
   * @param index The index of the element to return.
   * @return The parameterValues at the given index.
   */
  com.google.protobuf.ByteString getParameterValues(int index);

  /**
   * <code>repeated string parameter_types = 8;</code>
   * @return A list containing the parameterTypes.
   */
  java.util.List<java.lang.String>
      getParameterTypesList();
  /**
   * <code>repeated string parameter_types = 8;</code>
   * @return The count of parameterTypes.
   */
  int getParameterTypesCount();
  /**
   * <code>repeated string parameter_types = 8;</code>
   * @param index The index of the element to return.
   * @return The parameterTypes at the given index.
   */
  java.lang.String getParameterTypes(int index);
  /**
   * <code>repeated string parameter_types = 8;</code>
   * @param index The index of the value to return.
   * @return The bytes of the parameterTypes at the given index.
   */
  com.google.protobuf.ByteString
      getParameterTypesBytes(int index);

  /**
   * <code>string trace_id = 9;</code>
   * @return The traceId.
   */
  java.lang.String getTraceId();
  /**
   * <code>string trace_id = 9;</code>
   * @return The bytes for traceId.
   */
  com.google.protobuf.ByteString
      getTraceIdBytes();

  /**
   * <code>int64 timestamp = 10;</code>
   * @return The timestamp.
   */
  long getTimestamp();

  /**
   * <code>bool one_way = 11;</code>
   * @return The oneWay.
   */
  boolean getOneWay();
}
